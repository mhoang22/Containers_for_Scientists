{
  "hash": "4d6c7683b8c695ad0a5ffceb0a8328e4",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Using Containers\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g2effc5b673e_0_833.png){width=100%}\n:::\n:::\n\n\n\n\nLet's actually dive into using containers. You can follow along with this activity with either Docker or Podman. We recommend using Docker but if for admin reasons you are unable to use Docker, Podman's commands work nearly identically to Docker.\n\n### A note about \"window juggling\"\n\nWhen learning another software skill like containers, it sometimes means you'll have to keep track of more than one window. We call this \"Window Juggling\". It's an overlooked skill but something you'll become more comfortable with.\n\n**IMPORTANT**: Use the checkboxes to follow along with each step in the activities! This is to help you keep track because the steps have to be done in order!\n\n\n\n\n\n\n\n\n\n## Activity Instructions {.panelset}\n### Docker\n#### Set up\n\n<input type=\"checkbox\"> If not already installed, go here to [install Docker](https://www.docker.com/get-started), following the instructions for your particular operating system.<br>\n<input type=\"checkbox\"> If you don't have a Docker account create an account when prompted, or [go here](https://hub.docker.com/).<br>\n<input type=\"checkbox\"> Start up Docker desktop by double clicking on the app. It may take some time to start up.<br>\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_686.png){width=100%}\n:::\n:::\n\n\n\n\n#### Get workshop files\n\n<input type=\"checkbox\"> Download the files for this activity clicking here: [https://github.com/fhdsl/containers-for-scientists-sandbox/archive/refs/heads/main.zip](https://github.com/fhdsl/containers-for-scientists-sandbox/archive/refs/heads/main.zip) <br>\n<input type=\"checkbox\"> Put this file on your desktop so it is easily findable.<br>\n<input type=\"checkbox\"> Double click the zip file (or right click and choose \"unzip\" or \"decompress\" to unzip the file.<br>\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_693.png){width=100%}\n:::\n:::\n\n\n\n\n*ADD: Kate to add a brief description of the files that are here*\n\n#### Activity 1: Pull and run a Docker image\n\n**This activity is built so that you will encounter errors that this guide will work you through!**\nOne of the most common container stumbling blocks is understanding the idea that containers are isolated from your computer.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_700.png){width=100%}\n:::\n:::\n\n\n\n\nWhich means: If your computer has files, software, or anything else. Your container by default does NOT have it unless you do something to get those files and software on there.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_713.png){width=100%}\n:::\n:::\n\n\n\n\nWe will encounter both an error when we don't have a file we need AND an error when we don't have a software package we need. We will guide you through what to do when these expected errors occur.\n\n#### Step 1: Docker pull\n\nWe need to get the Docker **image** we want to use. We do this by \"pulling\" it.\nPulling is a term used in GitHub terminology too. It just means we're taking something from the internet and getting a copy locally (on our computer). Pulling is basically like downloading.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_732.png){width=100%}\n:::\n:::\n\n\n\n\n<input type=\"checkbox\"> Run this command in your Terminal or Command Prompt window:\n\n```\ndocker pull cansav09/practice-image:1\n```\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_745.png){width=100%}\n:::\n:::\n\n\n\n\n\n##### Step 2: Check what images you have\n\n<input type=\"checkbox\"> To see what images we have we can run `docker image ls`.<br>\n<input type=\"checkbox\"> Alternatively, you can visit the Images tab of the docker desktop app.<br>\n<input type=\"checkbox\"> We should see `cansav09/practice-image:1` show up in the output.<br>\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_752.png){width=100%}\n:::\n:::\n\n\n\n\n##### Step 3: Use the Run command to start a container from the image!\n\nRemember images can be shared easily but to actually use the stuff we need to turn our image into a container! To do that we will use the `docker run` command\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_760.png){width=100%}\n:::\n:::\n\n\n\n\n<input type=\"checkbox\"> To launch the image for use, we can use `docker run` to turn it into a **container**.  \n```\ndocker run cansav09/practice-image:1\n```\n\n<input type=\"checkbox\"> Alternatively, we can press the play button for the image in images tab of the desktop app.  \n\n\n<input type=\"checkbox\"> To see what containers we have running we have we can run (in a new terminal session):\n\n```\ndocker ps\n```\n\n<input type=\"checkbox\"> Alternatively, you can visit the Containers tab of the docker desktop app.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_775.png){width=100%}\n:::\n:::\n\n\n\n\nPat yourself on the back! You have a running container!\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_786.png){width=100%}\n:::\n:::\n\n\n\n\n\nWhat can we do with running containers?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_791.png){width=100%}\n:::\n:::\n\n\n\n\n##### Step 4: Run a single command\n\n<input type=\"checkbox\"> To run stuff interactively from the command line we can do:  \n\n```\ndocker exec -it <PUT_CONTAINER_ID_HERE> bash\n```\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_803.png){width=100%}\n:::\n:::\n\n\n\nYou can find the `CONTAINER ID` in the containers tab of the desktop app or by using the `docker container ls` command in the terminal. Note that whereas the `docker run` command creates a new container from a docker image, the `docker exec` command executes a command inside an already running container. The `-it` option tells docker to execute the command interactively. In this case the actual command being specified is `bash`. Altogether the result is an interactive Bash shell inside the already running container.\n\nIf you run the above command you should see your terminal/command prompt now have the initial part change to something like:\n\n```\nroot@e7b19cfb4461:/\n```\n\nWhere you'll noticed the `CONTAINER ID` is now shown there.\n\nYou are now using command line inside of your container. Trying running any bash command like\n`ls` to see what files are here for example.\n\nYour screen will end up looking like this (but this printout is from a Mac, windows will look a little different in some parts):\n```\n(base) firstnamelastname@FirstNames-MacBook-Pro ~ % docker exec -it e7b19cfb4461 bash\n\nroot@e7b19cfb4461:/# ls\nbin   etc   lib    libexec  mnt   rocker_scripts  sbin  tmp\nboot  home  lib32  libx32   opt   root            srv   usr\ndev   init  lib64  media    proc  run             sys   var\nroot@e7b19cfb4461:/#\n```\n\n<input type=\"checkbox\"> When you are ready to leave your container type `exit` and press Enter.  \n\n\n##### Step 5: Try calling a script\n\n<input type=\"checkbox\"> Make sure you are in the unzipped workshop directory.\n<input type=\"checkbox\"> To run a script using the docker container we could just add reference to a script at the end. \n\n```\ncd containers-for-scientists-sandbox-main\ndocker exec -it <PUT_CONTAINER_ID_HERE> bash run_analysis.sh\n```\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_812.png){width=100%}\n:::\n:::\n\n\n\n\n**BUT! You will find that this command won't work yet though, why?**\n\n```\nbash: run_analysis.sh: No such file or directory\n```\n\n**Question: Does our container have all of the same files that our computer has?**\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_833.png){width=100%}\n:::\n:::\n\n\n\n\nThis won't work because the file `run_analysis.sh` is not a file that our container has. Docker containers do not have all the files that our computer does; they only have the files we add to it.\n\n### Podman\n#### Set up Podman\n\n<input type=\"checkbox\"> Go here to [install Podman](https://podman.io/docs/installation), following the instructions for your particular operating system.<br>\n<input type=\"checkbox\"> Open up your [command line](https://towardsdatascience.com/a-quick-guide-to-using-command-line-terminal-96815b97b955).<br>\n<input type=\"checkbox\"> Start up Podman by running the following:<br>\n\n```\npodman machine init\npodman machine start\n```\n\n#### Get workshop files\n\n<input type=\"checkbox\"> Download the files for this activity clicking here: [https://github.com/fhdsl/containers-for-scientists-sandbox/archive/refs/heads/main.zip](https://github.com/fhdsl/containers-for-scientists-sandbox/archive/refs/heads/main.zip) <br>\n<input type=\"checkbox\"> Put this file on your desktop so it is easily findable.<br>\n<input type=\"checkbox\"> Double click the zip file (or right click and choose \"unzip\" or \"decompress\" to unzip the file.<br>\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_693.png){width=100%}\n:::\n:::\n\n\n\n\n**This activity is built so that you will encounter errors that this guide will work you through!**\nMost common container stumbling block is understanding the idea that containers are isolated from your computer\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_700.png){width=100%}\n:::\n:::\n\n\n\n\nWhich means: If your computer has files, software, or anything else. Your container by default does NOT have it unless you do something to get those files and software on there.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_713.png){width=100%}\n:::\n:::\n\n\n\n\nWe will encounter both an error of when we don't have a file we need AND an error of when we don't have a software package we need. We will guide you through what to do when these expected errors occur.\n\n##### Step 1: Podman pull\n\nWe need to get the **image** we want to use. We do this by \"pulling\" it.\nPulling is a term used in GitHub terminology too. It just means we're taking something from the internet and getting a copy locally (on our computer).\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_732.png){width=100%}\n:::\n:::\n\n\n\n\n<input type=\"checkbox\"> Run this command in your Terminal or Command Prompt window:  \n\n```\npodman pull cansav09/practice-image:1\n```\n\nIf this command is running properly you should see some output that looks like this:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a80783034_1_0.png){width=100%}\n:::\n:::\n\n\n\n\n##### Step 2: Check what images you have\n\n<input type=\"checkbox\"> To see what images we have we can run `podman image ls`.<br>\n<input type=\"checkbox\"> You should see `cansav09/practice-image:1` show up in the output and it will look a bit like this below:<br>\n\n```\ndocker.io/cansav09/practice-image  1   91619ca583b8  1 month ago  2.39 GB\n```\n\n##### Step 3: Run the image to start a container!\n\nRemember images can be shared easily but to actually use the stuff we need to turn our image into a container! To do that we will do `podman run`\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_760.png){width=100%}\n:::\n:::\n\n\n\n\n<input type=\"checkbox\"> To launch the image for use, we can use `podman run` to turn it into a **container**.  \n\n```\npodman run cansav09/practice-image:1\n```\n\nIf this command has run properly it will return something like this:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a80783034_1_9.png){width=100%}\n:::\n:::\n\n\n\n\nDon't worry too much about all this output, every image is configured differently and this output will change depending on that.\n\n<input type=\"checkbox\"> To see what containers we have running we have we can run:  \n\n```\npodman ps\n```\n\nYour output will look a little like this.\nNOTE though that the `CONTAINER ID` and `NAMES` are randomly generated for each container and will change, so that part won't be the same!\n\n```\nCONTAINER ID  IMAGE                                COMMAND     CREATED        STATUS        PORTS       NAMES\ne7b19cfb4461  docker.io/cansav09/practice-image:1  /init       2 minutes ago  Up 2 minutes  8787/tcp    hopeful_proskuriakova\n```\n\nPat yourself on the back! You have a running container!\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_786.png){width=100%}\n:::\n:::\n\n\n\n\nWhat can we do with running containers?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_791.png){width=100%}\n:::\n:::\n\n\n\n\n##### Step 4: Run the container interactively\n\n<input type=\"checkbox\"> To run stuff interactively from the command line we can do:  \n\nBut you'll need to replace the `<PUT_CONTAINER_ID_HERE>` portion of this command with the `CONTAINER ID` reported when you ran `podman ps`.\n```\npodman exec -it <PUT_CONTAINER_ID_HERE> bash\n```\n\nIf you run this you should see your terminal/command prompt now have the initial part change to something like:\n```\nroot@e7b19cfb4461:/\n```\n\nWhere you'll noticed the `CONTAINER ID` is now shown there.\n\nYou are now using command line inside of your container. Trying running any bash command like\n`ls` to see what files are here for example.\n\nYour screen will end up looking like this:\n```\n(base) firstnamelastname@FirstNames-MacBook-Pro ~ % podman exec -it e7b19cfb4461 bash\n\nroot@e7b19cfb4461:/# ls\nbin   etc   lib    libexec  mnt   rocker_scripts  sbin  tmp\nboot  home  lib32  libx32   opt   root            srv   usr\ndev   init  lib64  media    proc  run             sys   var\nroot@e7b19cfb4461:/#\n```\n\n<input type=\"checkbox\"> When you are ready to leave your container type `exit` and press Enter.  \n\n\n##### Step 5: Try calling a script\n\n<input type=\"checkbox\"> To run a script using the container we could just add reference to a script at the end:  \n\n```\npodman exec -it <PUT_CONTAINER_ID_HERE> bash run_analysis.sh\n```\n\n**BUT! You will find that this command won't work yet though, why?**\n\nThis won't work because the file `run_analysis.sh` is not a file that our container has. Docker containers do not have all the files that our computer does; they only have the files we add to it.\n\n```\nbash: run_analysis.sh: No such file or directory\n```\n\n**Question: Does our container have all of the same files that our computer has?**\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_833.png){width=100%}\n:::\n:::\n\n\n\n\nThis won't work because the file `run_analysis.sh` is not a file that our container has. Docker containers do not have all the files that our computer does; they only have the files we add to it.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/panelset-0.3.0/panelset.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/panelset-0.3.0/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}