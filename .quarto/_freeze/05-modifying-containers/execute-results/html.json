{
  "hash": "ad5ff6e106f747741c6c082ccee15231",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Modifying Containers\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g2effc5b673e_0_847.png){width=100%}\n:::\n:::\n\n\n\n\n\n\nA Dockerfile is a recipe for how to build a docker image. The best way to learn to write Dockerfiles is to start off with one that is already written and modify it for your needs.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1169.png){width=100%}\n:::\n:::\n\n\n\n\n## Activity Instructions\n\n<input type=\"checkbox\"> Open up the Dockerfile in the  `activity-files` folder.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1192.png){width=100%}\n:::\n:::\n\n\n\n\nYou'll notice we have this at the top for you:\n```\nFROM cansav09/practice-image:1\n```\n\nThis means we're going to take the existing image called, `cansav09/practice-image:1` and build on to it.\nThis image will be our base. There are so many Docker images out there that it might be that someone has already created a docker image with most of the functionality you need for your project.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1200.png){width=100%}\n:::\n:::\n\n\n\n\nThe trick is to find a base image that has most of the software things you need, but not extra stuff you don't need. You want to make your image have all the stuff it needs but also be as small as possible. Images that are overly big are harder to deal with and to download.\n\n_There are (at least) two strategies you can take_:\n\n- Start with the smallest images possible and add only what you need for the specific case you are working on.  \n- Make more than one docker image for each use case you have. Don't make one really large docker image you use for everything, that will take forever to pull from the internet or forever to build.  \n\n\nLet's take a look at a Dockerfile.\n\n#### Step 1: Use any file editor to open up the Dockerfile\n<input type=\"checkbox\"> Open the file to take a look at it with any text editor.\n\n#### Step 2: Change your working directory to activity-files\n\n<input type=\"checkbox\">  Now in your Command Prompt or Terminal navigate to the `activity-files` folder. Use `cd` and don't forget to use tabs so you don't have to spell everything exactly.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1212.png){width=100%}\n:::\n:::\n\n\n\n\n## {.panelset}\n\n### Docker\n#### Step 3: Build the image from the Dockerfile\n\n<input type=\"checkbox\">  With `activity-files` as your working directory, run the following:\n\n```\ndocker build . -t cool-new-image\n```\n\nOptionally you could call this from somewhere else and use the `-f` option to specify the file path to the Dockerfile. But in the scenario above it just grabs the Dockerfile in our working directory.\n\nIf your image builds properly you should see something like this:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1221.png){width=100%}\n:::\n:::\n\n\n\n\n#### Step 4: Inspect new image!\n\n<input type=\"checkbox\"> Let's see if we have an image!\n```\ndocker image ls\n```\n\nAnd if you check Docker desktop you should now see this image show up in your list:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1230.png){width=100%}\n:::\n:::\n\n\n\n\n#### Step 5: Run the new image\n\n<input type=\"checkbox\"> Let's try running that image.\n\n```\ndocker run cool-new-image\n```\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1238.png){width=100%}\n:::\n:::\n\n\n\n\n#### Step 6: See the minor difference!\n\n<input type=\"checkbox\"> We should have a message: `Yay! I built a Docker image` pop up upon building the image. Not super useful but we can see how we've edited the original image.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1247.png){width=100%}\n:::\n:::\n\n\n\n\n#### Step 7: Edit the Dockerfile so it has the installation step for rmarkdown package and remove the CMD step\n\nFor anything we need to run in the image we are building we need to use the `RUN` command followed by the installation steps we'd need.\n\n<input type=\"checkbox\"> Open up the file called `Dockerfile` in `activity-files`.\n\n<input type=\"checkbox\"> **Copy and paste** this into your Dockerfile below where it says `# Add a new package here ` so we can add the `rmarkdown` package.\n\n```\nRUN Rscript -e  \"options(warn = 2);install.packages('rmarkdown', \\\n    repos = 'https://cloud.r-project.org/')\"\n```\n<input type=\"checkbox\"> **remove the `CMD` line**.\n\n<input type=\"checkbox\"> Save your edited Dockerfile.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1253.png){width=100%}\n:::\n:::\n\n\n\n\n#### Step 8: Re-build now that we’ve edited the Dockerfile\n\n<input type=\"checkbox\">Now re-run `docker build` (or `podman build`) as you did in the previous section. This time we'll add a versioning tag using `:` in the `-t` option.\n\n```\ndocker build . -t cool-new-image:2\n```\n\nIf all built successfully, you should see a message like:\n```\n=> exporting to image                                                     0.0s\n=> => exporting layers                                                    0.0s\n=> => writing image sha256:ayuahgfuiseohfauwheufhauwihefuahweufhawfbuibe  0.0s\n=> => naming to docker.io/library/cool-new-image:2\n```\n\n#### Step 9: Run container from cool-new-image:2\n\nNow let's retry running the script from here but we will need to specify the volume again! Make sure that you are in the top level `containers-for-scientists-sandbox-main` directory.\n\n<input type=\"checkbox\"> First run the container using the `2` image:\n```\ndocker run -v $PWD:/home cool-new-image:2\n```\n\n#### Step 10: Re-Retry calling the script\n\n<input type=\"checkbox\"> Run `docker ps` or `podman ps` can get you the container ID. Or look on your Docker Desktop.\n\n<input type=\"checkbox\"> Try running the script using the following command:\n```\ndocker exec -it <REPLACE_WITH_CONTAINER_ID> bash /home/run_analysis.sh\n```\n\n### Podman\n\n#### Step 3: Build the image from the Dockerfile\n\n<input type=\"checkbox\">  With `activity-files` as your working directory, run the following:\n\n```\npodman build . -t cool-new-image\n```\n\nOptionally you could call this from somewhere else and use the `-f` option to specify the file path to the Dockerfile. But in the scenario above it just grabs the Dockerfile in our working directory.\n\n#### Step 4: Inspect new image!\n\n<input type=\"checkbox\"> Let's see if we have an image!\n```\npodman image ls\n```\n\n#### Step 5: Run the new image\n\n<input type=\"checkbox\">  Navigate back to your Docker desktop and the `images` window or run `docker ps` or `podman ps`. If your image built successfully, you should see a new image in your list!\n<input type=\"checkbox\"> Let's try running that image.\n\n```\npodman run cool-new-image\n```\n\n#### Step 6: See the minor difference!\n\n<input type=\"checkbox\"> We should have a message: `Yay! I built a Docker image` pop up upon building the image. Not super useful but we can see how we've edited the original image.\n\n#### Step 7: Edit the Dockerfile so it has the installation step for rmarkdown package and remove the CMD step\n\nFor anything we need ran in this image we are building we need to use the `RUN` command followed by the installation steps we'd need.\n\n<input type=\"checkbox\"> Open up the file called `Dockerfile` in `activity-files`.\n<input type=\"checkbox\"> **Copy and paste** this into your Dockerfile below where it says `# Add a new package here ` so we can add the `rmarkdown` package.\n\n```\nRUN Rscript -e  \"options(warn = 2);install.packages('rmarkdown', \\\n    repos = 'https://cloud.r-project.org/')\"\n```\n<input type=\"checkbox\"> **AND remove the `CMD` line**.\n<input type=\"checkbox\"> Save your edited Dockerfile.\n\n#### Step 8: Re-build now that we’ve edited the Dockerfile\n\n<input type=\"checkbox\">Now re-run `docker build` (or `podman build`) as you did in the previous section. This time we'll add a versioning tag using `:` in the `-t` option.\n\n```\npodman build . -t cool-new-image:2\n```\n\nIf all built successfully, you should see a message like:\n```\n=> exporting to image                                                     0.0s\n=> => exporting layers                                                    0.0s\n=> => writing image sha256:ayuahgfuiseohfauwheufhauwihefuahweufhawfbuibe  0.0s\n=> => naming to docker.io/library/cool-new-image:2\n```\n\n#### Step 9: Run container from cool-new-image:2\n\nNow let's retry running the script from here but we will need to specify the volume again!\n\n<input type=\"checkbox\"> First run the container using the `2` image:\n```\npodman run -v $PWD:/home cool-new-image:2\n```\n\n#### Step 10: Re-Retry calling the script\n\n<input type=\"checkbox\"> Run `docker ps` or `podman ps` can get you the container ID. Or look on your Docker Desktop.\n<input type=\"checkbox\"> Try running the script using the following command:\n```\npodman exec -it <REPLACE_WITH_CONTAINER_ID> bash /home/run_analysis.sh\n```\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a4ed49e59_0_1326.png){width=100%}\n:::\n:::\n\n\n\n\n\n## Essential Docker commands:\n\nNow that you're familiar with the basics of Dockerfiles, let's dive into some more\n\n`FROM` is one of the [main commands that a Dockerfile can take as described by their documentation](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n\nNow you are also familiar with `CMD` which runs something when the container is built\n\n> **FROM** creates a layer from the another Docker image.\n> **CMD** specifies what command to run within the container.\n> **RUN** builds your application with make.\n> **COPY** adds files from your Docker client’s current directory.\n\nNext let's use `RUN` to add a package to our image.\n\n## Templates for adding packages!\n\nStarting off with your example Dockerfile, we will practice adding another package and re-build the docker image with a new package.\n\n**Note** that spacing is important as well as having a `\\` at the end of each line if the command is continuing.\n\nTo add R packages from CRAN, you can use this kind of format:\n```\nRUN Rscript -e  \"install.packages( \\\n    c('BiocManager', \\\n      'R.utils', \\\n      'newpackagename'))\"\n```\n\nTo add an R package from Bioconductor, you can follow this kind of format:\n\n```\nRUN Rscript -e \"options(warn = 2); BiocManager::install( \\\n  c('limma', \\\n    'newpackagename')\n\n```\n\nTo add a **Python package using pip**, you will need to add pip3 to install Python packages using this format. But first you'll need to make sure you have pip installed using:\n\nInstall pip:\n```\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    python3-pip\n```\n\nThen you can use pip install to install packages\n```\nRUN pip3 install \\\n    \"somepackage==0.1.0\"\n```\n\nThere are so many things you can add to your Docker image. (Picture whatever software and packages you are using on your computer). We have gotten you started with a simple example of how to write a Dockerfil and build a docker image from a base image plus some additional packages. But, what you put on your Docker image will be up to you.\n\nTo figure out how to add something, a good strategy is to look for other Dockerfiles that might have the package you want installed and borrow their `RUN` command. Then try to re-build your Docker image with that added `RUN` command and see if it builds successfully. Another strategy is to enter an interactive terminal session on your base image, work out the required commands for installing the missing tool/package, then add those `RUN` commands to your Dockerfile.\n\nAnd lastly, make sure that whatever changes you make to your Dockerfile, that you add it to your GitHub repository!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/panelset-0.3.0/panelset.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/panelset-0.3.0/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}