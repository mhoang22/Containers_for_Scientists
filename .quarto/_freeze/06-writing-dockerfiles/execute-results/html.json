{
  "hash": "2deeae31127a9560fdab7901a9a9e1b9",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Writing Dockerfiles\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](resources/images/figure//1T5Lfei2UVou9b0qaUCrWXmkcIwAao-UcN4pHMPEE4CY_g30a80783034_1_34.png){width=100%}\n:::\n:::\n\n\n\n\nNow that you're familiar with the basics of Dockerfiles and how to use them to build images, let's dive into some more of the things you can do with them.\n\n`FROM` is one of the [main commands that a Dockerfile can take, as described by their documentation](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/).\n\nNow you are also familiar with `CMD` which runs something when the container is built.\n\n> **FROM** creates a layer from another Docker image.\n> **CMD** specifies what command to run within the container.\n> **RUN** builds your application with make.\n> **COPY** adds files from your Docker clientâ€™s current directory.\n\nNext let's use `RUN` to add a package to our image.\n\n## Templates for adding packages!\n\nStarting off with your example Dockerfile, we will practice adding another package and re-build the docker image with a new package.\n\n**Note** that spacing is important as well as having a `\\` at the end of each line if the command is continuing.\n\nTo add R packages from CRAN, you can use this kind of format:\n```\nRUN Rscript -e  \"install.packages( \\\n    c('BiocManager', \\\n      'R.utils', \\\n      'newpackagename'))\"\n```\n\nTo add an R package from Bioconductor, you can follow this kind of format:\n\n```\nRUN Rscript -e \"options(warn = 2); BiocManager::install( \\\n  c('limma', \\\n    'newpackagename')\n\n```\n\nTo add a **Python package using pip**, you will need to add pip3 to install Python packages using this format. But first you'll need to make sure you have pip installed using:\n\nInstall pip:\n```\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    python3-pip\n```\n\nThen you can use pip install to install packages\n```  \nRUN pip3 install \\\n    \"somepackage==0.1.0\"\n```\n\nThere are so many things you can add to your Docker image. (Picture whatever software and packages you are using on your computer). We can only get you started for the feel of how to build a Dockerfile, and what you put on your Docker image will be up to you.\n\nTo figure out how to add something, a good strategy is to look for other Dockerfiles that might have the package you want installed and borrow their `RUN` command. Then try to re-build your Docker image with that added `RUN` command and see if it builds successfully.\n\nMake sure that whatever changes you make to your Dockerfile, that you add version control it and add it to your GitHub repository!\n\n## Troubleshooting tips for building images \n\n1. Look for a good base image to start with on your `FROM` Something that has a lot of what you need but not more software packages than you need.\n    - If you know you want use `R` on your container then take a look at [the `rocker` images](https://hub.docker.com/u/rocker). \n    - If you know you want to use Jupyter notebooks on your container, go to the [Jupyter Project images](https://hub.docker.com/u/jupyter). \n    - If you are doing anything with bioinformatics software, [take a look at Biocontainers](https://biocontainers.pro/). \n2. When adding packages, look for other Dockerfiles folks have written that have the same operating system aka usually Ubuntu, and copy their installation steps. \n3. Use version numbers so if you rebuild the same versions will be installed and that won't be a moving target for you. \n4. Should the installation steps fail, try to pinpoint what is the first part it is failing on. Look for if there's a message like \"missing dependency\" or something similar. It may mean you need to add another package in there before installing this package. \n5. Google your error messages. Look on StackOverflow. Post on StackOverflow.\n6. If all else fails, can you just install a different software or a different version number of that software that can do the same functionality? \n7. If you change something in a base image or in a file that is copied over you may need to use `--no-cache` so that everything really gets rebuilt from scratch. \n\n### More learning \n\nFor more about Dockerfiles go to [Docker's documentation tutorials](https://docs.docker.com/get-started/docker-concepts/building-images/writing-a-dockerfile/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}